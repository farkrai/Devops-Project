trigger:
  - main

pool:
  name: Agent
  demands:
    - Agent.Name -equals Shrivathsan

variables:
  - group: docker-credentials
  - name: DOCKER_IMAGE_NAME
    value: 'farkrai/devopsproject'

steps:

# Step 1: Checkout code
- checkout: self

# Step 2: Install Node.js
- task: NodeTool@0
  inputs:
    versionSpec: '18.x'
  displayName: 'Install Node.js 18'

# Step 3: Install npm dependencies
- script: |
    cd Backend
    npm install
  displayName: 'Install npm dependencies'

# Step 4: Check Java version
- script: |
    echo "JAVA_HOME is $JAVA_HOME"
    java -version
  displayName: 'Check Java Environment'

# Step 5: SonarQube Prepare
- task: SonarQubePrepare@5
  inputs:
    SonarQube: 'sonar'
    scannerMode: 'CLI'
    configMode: 'manual'
    cliProjectKey: 'AzureDevops'
    cliProjectName: 'AzureDevops'
    cliSources: 'Backend'
    extraProperties: |
      sonar.host.url=http://localhost:9000
  env:
    JAVA_HOME: '/usr/lib/jvm/java-21-openjdk'
    PATH: '/usr/lib/jvm/java-21-openjdk/bin:$(PATH)'
  displayName: 'Prepare SonarQube Analysis'

# Step 6: SonarQube Analyze
- task: SonarQubeAnalyze@5
  displayName: 'Run SonarQube Analysis'
  env:
    JAVA_HOME: '/usr/lib/jvm/java-21-openjdk'
    PATH: '/usr/lib/jvm/java-21-openjdk/bin:$(PATH)'

# Step 7: SonarQube Publish
- task: SonarQubePublish@5
  inputs:
    pollingTimeoutSec: '300'
  displayName: 'Publish SonarQube Results'
  env:
    JAVA_HOME: '/usr/lib/jvm/java-21-openjdk'
    PATH: '/usr/lib/jvm/java-21-openjdk/bin:$(PATH)'

# Step 8: OWASP Dependency Check
- task: dependency-check-build-task@6
  displayName: 'Run OWASP Dependency-Check'
  inputs:
    projectName: 'AzureDevops'
    scanPath: 'Backend'
    format: 'HTML'
    outDir: '$(Build.ArtifactStagingDirectory)/dependency-check-report'
    failOnCVSS: '12'
  env:
    JAVA_HOME: '/usr/lib/jvm/java-21-openjdk'
    PATH: '/usr/lib/jvm/java-21-openjdk/bin:$(PATH)'

# Step 9: Docker Login
- script: |
    echo $(DOCKER_PASSWORD) | docker login -u $(DOCKER_USERNAME) --password-stdin
  displayName: 'Docker Login'

# Step 10: Docker Build
- script: |
    cd Backend
    docker build -t $(DOCKER_IMAGE_NAME):$(Build.BuildId) .
    docker tag $(DOCKER_IMAGE_NAME):$(Build.BuildId) $(DOCKER_IMAGE_NAME):latest
  displayName: 'Docker Build'

# Step 11: Install Trivy
- script: |
    wget https://github.com/aquasecurity/trivy/releases/latest/download/trivy_0.50.1_Linux-64bit.tar.gz
    tar zxvf trivy_0.50.1_Linux-64bit.tar.gz
    sudo mv trivy /usr/local/bin/trivy
    trivy --version
  displayName: 'Install Trivy'

# Step 12: Trivy Docker Image Scan
- script: |
    trivy image --format table --severity UNKNOWN,LOW,MEDIUM,HIGH,CRITICAL \
      --ignore-unfixed $(DOCKER_IMAGE_NAME):$(Build.BuildId)
  displayName: 'Trivy Docker Image Scan'

# Step 13: Trivy File System Scan
- script: |
    trivy fs Backend --format table --severity UNKNOWN,LOW,MEDIUM,HIGH,CRITICAL \
      --ignore-unfixed
  displayName: 'Trivy File System Scan'

# Step 14: Install Newman
- task: Npm@1
  displayName: 'Install Newman globally'
  inputs:
    command: 'custom'
    customCommand: 'install -g newman'

# Step 15: Run Postman Product API Tests (Only Products)
- script: |
    mkdir -p newman
    newman run Backend/tests/collection.json \
      -e Backend/tests/environment.json \
      --reporters cli,junit \
      --reporter-junit-export newman/results.xml
  displayName: 'Run Product API Tests with Newman'

# Step 16: Publish Test Results
- task: PublishTestResults@2
  displayName: 'Publish Postman Test Results'
  inputs:
    testResultsFormat: 'JUnit'
    testResultsFiles: '**/newman/results.xml'
    failTaskOnFailedTests: true
  condition: succeededOrFailed()

# Step 17: Docker Push
- script: |
    docker push $(DOCKER_IMAGE_NAME):$(Build.BuildId)
    docker push $(DOCKER_IMAGE_NAME):latest
  displayName: 'Docker Push'
  condition: succeeded()